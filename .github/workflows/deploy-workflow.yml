# This is the name of our workflow.
# Github will show it on its Website UI
name: deploy
# This configures our workflow to be triggered
# only when we push to the master branch
on:
  push:
    branches:
      - master

# Here is where we define our jobs.
# Which means the tasks we want Github to execute
jobs:
  build:
    name: deploy
    # Here we specify in whith OS we want it to run
    runs-on: ubuntu-18.04
    # Now we define which actions will take place.
    # One after another
    steps:
      # This is the first action. It will make sure that we have
      # all the necessary files from our repo, including our custom actions
      # This action here is actually from a remote repo available from Githup itself
      - name: ðŸ›Ž Checkout master
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Get cached gems
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: ðŸ”¨ Build site
        uses: helaili/jekyll-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
#      - name: ðŸ”¨ Build site
#        uses: ./.github/actions/build-dist-site
#        env:
          # Now make sure you add this environment variable.
          # This token will allow us to push to github directly
          # without having to type in our password.
          # The GITHUB_TOKEN is available by default 
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          GITHUB_REPOSITORY: ${{ secrets.GITHUB_REPOSITORY }}
#          GITHUB_ACTOR: ${{ secrets.GITHUB_ACTOR }}
#          ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
      - name: Algolia Jekyll Action
        uses: dieghernan/algolia-jekyll-action@v1
        with:
          APIKEY: '${{ secrets.ALGOLIA_API_KEY }}'
      - name: ðŸ“‰ Check HTML
        uses: chabad360/htmlproofer@master
        with:
          directory: "./_site"
          # The directory to scan
          arguments: --only-4xx --assume-extension --check-favicon --check-html --check_opengraph --http-status-ignore "400, 403, 409, 429" --allow-hash-href --empty_alt_ignore
          # The arguments to pass to HTMLProofer
